# === ConfigMap per configurazioni applicazione ===
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: prestiti-biblioteca
data:
  # Configurazioni non sensibili dell'applicazione
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://+:8080"
  Logging__LogLevel__Default: "Information"

---
# === Secret per connection string database ===
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: prestiti-biblioteca
type: Opaque
data:
  # Connection string base64 encoded
  # echo -n 'Server=mssql-service,1433;Database=PrestitiBiblioteca;User Id=sa;Password=YourStrongPassword123!;TrustServerCertificate=True;' | base64
  ConnectionStrings__DefaultConnection: U2VydmVyPW1zc3FsLXNlcnZpY2UsMTQzMztEYXRhYmFzZT1QcmVzdGl0aUJpYmxpb3RlY2E7VXNlciBJZD1zYTtQYXNzd29yZD1Zb3VyU3Ryb25nUGFzc3dvcmQxMjMhO1RydXN0U2VydmVyQ2VydGlmaWNhdGU9VHJ1ZTs=

---
# === Deployment dell'applicazione .NET ===
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prestiti-biblioteca
  namespace: prestiti-biblioteca
  labels:
    app: prestiti-biblioteca
spec:
  replicas: 3  # 3 istanze per alta disponibilità
  selector:
    matchLabels:
      app: prestiti-biblioteca
  template:
    metadata:
      labels:
        app: prestiti-biblioteca
    spec:
      containers:
      - name: prestiti-biblioteca
        # Immagine placeholder - verrà sostituita dalla pipeline Jenkins
        image: IMAGE_PLACEHOLDER
        ports:
        - containerPort: 8080
          name: http
        
        # Variabili d'ambiente da ConfigMap
        envFrom:
        - configMapRef:
            name: app-config
        
        # Variabili d'ambiente sensibili da Secret
        env:
        - name: ConnectionStrings__DefaultConnection
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: ConnectionStrings__DefaultConnection
        
        # Configurazioni risorse
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        # Health checks per verificare lo stato dell'applicazione
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Configurazioni sicurezza
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: false
      
      # Politica di restart dei pod
      restartPolicy: Always
      
      # Configurazioni per il deployment
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 1
          maxSurge: 1
      
      # Init container per aspettare che il database sia pronto (opzionale)
      initContainers:
      - name: wait-for-db
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Attendo che il database sia disponibile..."
          until nc -z mssql-service 1433; do
            echo "Database non ancora disponibile, attendo..."
            sleep 5
          done
          echo "Database disponibile!"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"